{"version":3,"sources":["Components/Form.js","Components/Result.js","Components/App.js","serviceWorker.js","index.js"],"names":["Form","props","className","type","value","placeholder","onChange","change","Result","weather","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","App","state","handleInputChange","e","setState","target","prevProps","prevState","this","console","log","API","fetch","then","res","ok","Error","json","sys","main","speed","catch","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4NAkBeA,G,MAhBF,SAAAC,GACT,OACI,yBAAKC,UAAU,iBACX,8BACI,2BACIC,KAAK,OACLC,MAAOH,EAAMG,MACbC,YAAY,eACZC,SAAUL,EAAMM,UAGxB,yBAAKL,UAAU,UCmBZM,EA9BA,SAAAP,GAAS,IAAD,EACgCA,EAAMQ,QAAlDC,EADY,EACZA,KAAKC,EADO,EACPA,QAAQC,EADD,EACCA,OAAOC,EADR,EACQA,KAAKC,EADb,EACaA,SAASC,EADtB,EACsBA,KAAKC,EAD3B,EAC2BA,IAE1CC,EAAU,KAEd,IAAID,GAAON,EAAK,CACZ,IAAMQ,EAAc,IAAIC,KAAa,IAARR,GAAcS,qBACrCC,EAAa,IAAIF,KAAY,IAAPP,GAAaQ,qBACzCH,EACI,yBAAKf,UAAU,aACX,yBAAKA,UAAU,iBACX,uDAA4B,0BAAMA,UAAU,QAAQQ,KAExD,yBAAKR,UAAU,iBACX,oDAAyB,0BAAMA,UAAU,QAAQW,EAAxB,WACzB,oEAA4B,0BAAMX,UAAU,QAAQgB,IACpD,oEAA4B,0BAAMhB,UAAU,QAAQmB,IACpD,yDAAyB,0BAAMnB,UAAU,QAAQa,EAAxB,SACzB,uDAAuB,0BAAMb,UAAU,QAAQY,EAAxB,WAKvC,OACI,yBAAKZ,UAAU,WACVc,EAAG,2BAAuBN,GAASO,IC8CjCK,E,4MAhEbC,MAAQ,CACNnB,MAAO,GACPM,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,IAAK,I,EAGPQ,kBAAkB,SAACC,GACjB,EAAKC,SAAS,CACZtB,MAAOqB,EAAEE,OAAOvB,S,iEAIDwB,EAAWC,GAAW,IAAD,OACtC,GAAGA,EAAUzB,QAAU0B,KAAKP,MAAMnB,MAAM,CACtC2B,QAAQC,IAAI,MACZ,IAAMC,EAAI,qDAAD,OAAsDH,KAAKP,MAAMnB,MAAjE,kBAxBA,mCAwBA,iBAET8B,MAAMD,GACLE,MAAK,SAAAC,GACJ,GAAGA,EAAIC,GACL,OAAOD,EAET,MAAME,MAAM,8BAEbH,MAAK,SAAAC,GAAG,OAAIA,EAAIG,UAChBJ,MAAK,SAAAC,GACJ,EAAKV,SAAS,CACZV,KAAI,EACJL,QAASyB,EAAII,IAAI7B,QACjBC,OAAQwB,EAAII,IAAI5B,OAChBC,KAAMuB,EAAIK,KAAK5B,KACfC,SAAUsB,EAAIK,KAAK3B,SACnBC,KAAMqB,EAAIrB,KAAK2B,MACfhC,KAAM,EAAKa,MAAMnB,WAGpBuC,OAAM,SAAA3B,GACL,EAAKU,SAAS,CACZV,KAAI,EACJN,KAAM,EAAKa,MAAMnB,c,+BAOvB,OACE,6BACA,kBAAC,EAAD,CACCA,MAAO0B,KAAKP,MAAMnB,MAClBG,OAAQuB,KAAKN,oBAEd,kBAAC,EAAD,CAAQf,QAASqB,KAAKP,a,GA1DVqB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAiB,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.739c6bd6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"formContainer\">\r\n            <form>\r\n                <input \r\n                    type=\"text\"\r\n                    value={props.value}\r\n                    placeholder=\"Wpisz miasto\"\r\n                    onChange={props.change}\r\n                    />\r\n            </form>\r\n            <div className=\"hr\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form","import React from 'react';\r\n\r\nconst Result = props =>{\r\n    const {city,sunrise,sunset,temp,pressure,wind,err}=props.weather\r\n\r\n    let content = null;\r\n\r\n    if(!err && city){\r\n        const sunriseTime = new Date(sunrise*1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset*1000).toLocaleTimeString();\r\n        content = (\r\n            <div className=\"Container\">\r\n                <div className=\"cityContainer\">\r\n                    <h3>Wyniki wyszukiwania dla <span className=\"city\">{city}</span></h3>\r\n                </div>\r\n                <div className=\"specContainer\">\r\n                    <p>Aktualna temperatura: <span className=\"spec\">{temp} &#176;C</span></p>\r\n                    <p>Wschód słońca dzisiaj o: <span className=\"spec\">{sunriseTime}</span></p>\r\n                    <p>Zachód słońca dzisiaj o: <span className=\"spec\">{sunsetTime}</span></p>\r\n                    <p>Aktualna siła wiatru: <span className=\"spec\">{wind} m/s</span></p>\r\n                    <p>Aktualne ciśnienie: <span className=\"spec\">{pressure} hPa</span></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <div className=\"content\">\r\n            {err ? `Nie mamy w bazie ${city}` : content}\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Result","import React,{Component} from 'react';\nimport './App.css';\nimport Form from \"./Form\";\nimport Result from \"./Result\"\n\nconst APIKey = '661fa227036d06598b2bf1a9f43aea8c'\n\n\nclass App extends Component{\n  state = {\n    value: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    err: '',\n  }\n\n  handleInputChange=(e)=>{\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if(prevState.value !== this.state.value){\n      console.log(\"xd\")\n      const API=`https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`\n  \n      fetch(API)\n      .then(res => {\n        if(res.ok){\n          return res\n        }\n        throw Error(\"nie udało się\")\n      })\n      .then(res => res.json())\n      .then(res =>{\n        this.setState({\n          err:false,\n          sunrise: res.sys.sunrise,\n          sunset: res.sys.sunset,\n          temp: res.main.temp,\n          pressure: res.main.pressure,\n          wind: res.wind.speed,\n          city: this.state.value,\n        })\n      })\n      .catch(err => {\n        this.setState({\n          err:true,\n          city: this.state.value\n        })\n      })\n      }\n  }\n\n  render(){\n    return(\n      <div>\n      <Form\n       value={this.state.value} \n       change={this.handleInputChange}\n       />\n      <Result weather={this.state}/>\n    </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}